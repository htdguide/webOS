name: Build and Deploy Docker Image to Server

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Vitest
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Run Tests
        run: npm run test

  build-deploy:
    name: Build and Deploy Docker Image to Server
    runs-on: ubuntu-latest
    needs: test  # ensures we only build/deploy if tests pass
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker Image
        run: docker build . -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/webportfolio:latest

      - name: Push the Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/webportfolio:latest

      - name: Set up SSH key for server connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # --------------------------------------------------------
      # Step A: Upload SSL certificate and key to server
      # --------------------------------------------------------
      - name: Upload SSL Cert & Key to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Write the secrets into temp files
            echo "${{ secrets.SSL_CERT_CHAIN }}" > ssl.crt
            echo "${{ secrets.SSL_PRIVATE_KEY }}" > ssl.key

            # Create directories if they don't exist
            sudo mkdir -p /etc/ssl/certs
            sudo mkdir -p /etc/ssl/private

            # Move cert & key into place
            sudo mv ssl.crt /etc/ssl/certs/ssl.crt
            sudo mv ssl.key /etc/ssl/private/ssl.key

            # Set strict permissions so only root can read the private key
            sudo chmod 600 /etc/ssl/private/ssl.key

      # --------------------------------------------------------
      # Step B: Stop/Remove old containers, pull, and run
      # --------------------------------------------------------
      - name: Deploy Docker Container
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop and remove any existing containers
            sudo docker stop $(sudo docker ps -aq) || true
            sudo docker rm $(sudo docker ps -aq) || true

            # Pull the latest image from Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/webportfolio:latest

            # Run the container with volumes pointing to SSL certs
            sudo docker run -d \
              --name webportfolio \
              -p 80:80 \
              -p 443:443 \
              -v /etc/ssl/private/ssl.key:/etc/ssl/private/ssl.key:ro \
              -v /etc/ssl/certs/ssl.crt:/etc/ssl/certs/ssl.crt:ro \
              ${{ secrets.DOCKER_USERNAME }}/webportfolio:latest
